<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/2002/xmlspec/dtd/2.10/xmlspec.dtd">
<ehcache name="es">
  
    <diskStore path="java.io.tmpdir"/>
    
    <!--
       Name: The name of the cache.
       maxElementsInMemory: maximum number of caches
       maxElementsOnDisk: The maximum number of caches on the hard disk.
       Eternal: Whether the object is permanently valid, once set, timeout will not work.
       overflowToDisk: whether to save to disk, when the system is down
       timeToIdleSeconds: Sets the allowable idle time (in seconds) before the object expires. Only used when the eternal=false object is not permanently valid. Optional attribute, the default value is 0, which means that the idle time is infinite.
       timeToLiveSeconds: Sets the allowable lifetime (in seconds) before the object expires. The maximum time is between the creation time and the expiration time. Only used when the eternal=false object is not permanently valid. The default is 0. That is, the object lifetime is infinite.
       diskPersistent: Whether to cache virtual machine restart period data. The disk store persists between restarts of the Virtual Machine. The default value is false.
       diskSpoolBufferSizeMB: This parameter sets the buffer size of the DiskStore. The default is 30MB. Each Cache should have its own buffer.
       diskExpiryThreadIntervalSeconds: Disk invalid thread running interval, the default is 120 seconds.
       memoryStoreEvictionPolicy: When the maxElementsInMemory limit is reached, Ehcache will clean up the memory according to the specified policy. The default policy is LRU (least recently used). You can set it to FIFO (first in, first out) or LFU (less used).
        clearOnFlush: Whether to clear when the maximum amount of memory.
         memoryStoreEvictionPolicy:
            Three emptying strategies for Ehcache;
            FIFO, first in first out, this is the most familiar, first in, first out.
            LFU, Less Frequently Used, is the strategy used in the above example. It is straightforward to say that it has been used the least. As mentioned above, the cached element has a hit attribute, and the smallest hit value will be cleared out of the cache.
            LRU, Least Recently Used, the least recently used, cached element has a timestamp, when the cache capacity is full, and need to make room to cache new elements, then the timestamp in the existing cache element is away from the current time The farthest element will be cleared out of the cache.
    -->
     <defaultCache
            maxElementsInMemory="10000"
            eternal="false"
            timeToIdleSeconds="120"
            timeToLiveSeconds="120"
            overflowToDisk="false"
            diskPersistent="false"
            diskExpiryThreadIntervalSeconds="120"
            />
            
            
    <!-- 登录记录缓存锁定1小时 -->
    <cache name="passwordRetryCache"
            maxElementsInMemory="100000"
			eternal="false"
			timeToIdleSeconds="1800"
			timeToLiveSeconds="3600"
			overflowToDisk="false"
			diskPersistent="false"
			memoryStoreEvictionPolicy="LRU">
    </cache>
    
</ehcache>